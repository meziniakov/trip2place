// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgresql"
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  email          String?   @unique
  name           String?
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteIds    String[]  @db.ObjectId

  accounts     Account[]
  // listings Listing[]
  reservations Reservation[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refreshRoken      String? @db.String
  accessToken       String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Media {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  type      String
  public_id String
  listingId String  @db.ObjectId
  width     Int
  height    Int
  format    String
  bytes     Float?
  src       String
  duration  Float?
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Listing {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  type          String?
  description   String
  createdAt     DateTime @default(now())
  category      String
  locationLabel String?
  latlng        Float[]  @default([])

  medias Media[]
  // listi Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  // userId String @db.ObjectId

  // user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // reservations Reservation[]
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}
